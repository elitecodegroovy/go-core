// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customer.proto

package customer

/*
use proto version 3.6.0
field type definition, please referring to https://developers.google.com/protocol-buffers/docs/proto3
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new customer
type CustomerRequest struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// Each element in a repeated field requires re-encoding the tag number,
	// so repeated fields are particularly good candidates for this optimization.
	Addresses            []*CustomerRequest_Address `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CustomerRequest) Reset()         { *m = CustomerRequest{} }
func (m *CustomerRequest) String() string { return proto.CompactTextString(m) }
func (*CustomerRequest) ProtoMessage()    {}
func (*CustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_47a667b2c36707f0, []int{0}
}
func (m *CustomerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerRequest.Unmarshal(m, b)
}
func (m *CustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerRequest.Marshal(b, m, deterministic)
}
func (dst *CustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerRequest.Merge(dst, src)
}
func (m *CustomerRequest) XXX_Size() int {
	return xxx_messageInfo_CustomerRequest.Size(m)
}
func (m *CustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerRequest proto.InternalMessageInfo

func (m *CustomerRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustomerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomerRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CustomerRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CustomerRequest) GetAddresses() []*CustomerRequest_Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type CustomerRequest_Address struct {
	Street               string   `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	City                 string   `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	State                string   `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Zip                  string   `protobuf:"bytes,4,opt,name=zip,proto3" json:"zip,omitempty"`
	IsShippingAddress    bool     `protobuf:"varint,5,opt,name=isShippingAddress,proto3" json:"isShippingAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerRequest_Address) Reset()         { *m = CustomerRequest_Address{} }
func (m *CustomerRequest_Address) String() string { return proto.CompactTextString(m) }
func (*CustomerRequest_Address) ProtoMessage()    {}
func (*CustomerRequest_Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_47a667b2c36707f0, []int{0, 0}
}
func (m *CustomerRequest_Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerRequest_Address.Unmarshal(m, b)
}
func (m *CustomerRequest_Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerRequest_Address.Marshal(b, m, deterministic)
}
func (dst *CustomerRequest_Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerRequest_Address.Merge(dst, src)
}
func (m *CustomerRequest_Address) XXX_Size() int {
	return xxx_messageInfo_CustomerRequest_Address.Size(m)
}
func (m *CustomerRequest_Address) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerRequest_Address.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerRequest_Address proto.InternalMessageInfo

func (m *CustomerRequest_Address) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *CustomerRequest_Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CustomerRequest_Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CustomerRequest_Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *CustomerRequest_Address) GetIsShippingAddress() bool {
	if m != nil {
		return m.IsShippingAddress
	}
	return false
}

type CustomerResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerResponse) Reset()         { *m = CustomerResponse{} }
func (m *CustomerResponse) String() string { return proto.CompactTextString(m) }
func (*CustomerResponse) ProtoMessage()    {}
func (*CustomerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_47a667b2c36707f0, []int{1}
}
func (m *CustomerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerResponse.Unmarshal(m, b)
}
func (m *CustomerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerResponse.Marshal(b, m, deterministic)
}
func (dst *CustomerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerResponse.Merge(dst, src)
}
func (m *CustomerResponse) XXX_Size() int {
	return xxx_messageInfo_CustomerResponse.Size(m)
}
func (m *CustomerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerResponse proto.InternalMessageInfo

func (m *CustomerResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustomerResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CustomerFilter struct {
	Keyword              string   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerFilter) Reset()         { *m = CustomerFilter{} }
func (m *CustomerFilter) String() string { return proto.CompactTextString(m) }
func (*CustomerFilter) ProtoMessage()    {}
func (*CustomerFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_47a667b2c36707f0, []int{2}
}
func (m *CustomerFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerFilter.Unmarshal(m, b)
}
func (m *CustomerFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerFilter.Marshal(b, m, deterministic)
}
func (dst *CustomerFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerFilter.Merge(dst, src)
}
func (m *CustomerFilter) XXX_Size() int {
	return xxx_messageInfo_CustomerFilter.Size(m)
}
func (m *CustomerFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerFilter proto.InternalMessageInfo

func (m *CustomerFilter) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func init() {
	proto.RegisterType((*CustomerRequest)(nil), "customer.CustomerRequest")
	proto.RegisterType((*CustomerRequest_Address)(nil), "customer.CustomerRequest.Address")
	proto.RegisterType((*CustomerResponse)(nil), "customer.CustomerResponse")
	proto.RegisterType((*CustomerFilter)(nil), "customer.CustomerFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	// Get all Customers with filter - A server-to-client streaming RPC.
	GetCustomers(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (CustomerService_GetCustomersClient, error)
	// Create a new Customer - A simple RPC
	CreateCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error)
}

type customerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomerServiceClient(cc *grpc.ClientConn) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) GetCustomers(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (CustomerService_GetCustomersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CustomerService_serviceDesc.Streams[0], "/customer.CustomerService/GetCustomers", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerServiceGetCustomersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomerService_GetCustomersClient interface {
	Recv() (*CustomerRequest, error)
	grpc.ClientStream
}

type customerServiceGetCustomersClient struct {
	grpc.ClientStream
}

func (x *customerServiceGetCustomersClient) Recv() (*CustomerRequest, error) {
	m := new(CustomerRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customerServiceClient) CreateCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	// Get all Customers with filter - A server-to-client streaming RPC.
	GetCustomers(*CustomerFilter, CustomerService_GetCustomersServer) error
	// Create a new Customer - A simple RPC
	CreateCustomer(context.Context, *CustomerRequest) (*CustomerResponse, error)
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_GetCustomers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CustomerFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomerServiceServer).GetCustomers(m, &customerServiceGetCustomersServer{stream})
}

type CustomerService_GetCustomersServer interface {
	Send(*CustomerRequest) error
	grpc.ServerStream
}

type customerServiceGetCustomersServer struct {
	grpc.ServerStream
}

func (x *customerServiceGetCustomersServer) Send(m *CustomerRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _CustomerService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerService_CreateCustomer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCustomers",
			Handler:       _CustomerService_GetCustomers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "customer.proto",
}

func init() { proto.RegisterFile("customer.proto", fileDescriptor_customer_47a667b2c36707f0) }

var fileDescriptor_customer_47a667b2c36707f0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x4a, 0xfb, 0x40,
	0x10, 0xc7, 0xbb, 0x69, 0xd3, 0x3f, 0xf3, 0xfb, 0x11, 0xeb, 0x20, 0xb2, 0xe6, 0x14, 0x73, 0x0a,
	0x22, 0x45, 0xea, 0x55, 0x10, 0x29, 0x58, 0xbc, 0xa6, 0x4f, 0x10, 0x93, 0xc1, 0x2e, 0xb6, 0x49,
	0xdc, 0xdd, 0x2a, 0xf5, 0x15, 0x7c, 0x0e, 0xef, 0x3e, 0xa2, 0xec, 0x26, 0x6b, 0xc1, 0xda, 0xdb,
	0x7c, 0xbf, 0xb3, 0x33, 0xf3, 0x99, 0x49, 0x20, 0xc8, 0x37, 0x4a, 0x57, 0x6b, 0x92, 0x93, 0x5a,
	0x56, 0xba, 0xc2, 0xa1, 0xd3, 0xf1, 0x97, 0x07, 0x47, 0xb3, 0x56, 0xa4, 0xf4, 0xb2, 0x21, 0xa5,
	0x31, 0x00, 0x4f, 0x14, 0x9c, 0x45, 0x2c, 0xf1, 0x53, 0x4f, 0x14, 0x88, 0xd0, 0x2b, 0xb3, 0x35,
	0x71, 0x2f, 0x62, 0xc9, 0x28, 0xb5, 0x31, 0x9e, 0x80, 0x4f, 0xeb, 0x4c, 0xac, 0x78, 0xd7, 0x9a,
	0x8d, 0x30, 0x6e, 0xbd, 0xac, 0x4a, 0xe2, 0xbd, 0xc6, 0xb5, 0x02, 0x6f, 0x61, 0x94, 0x15, 0x85,
	0x24, 0xa5, 0x48, 0x71, 0x3f, 0xea, 0x26, 0xff, 0xa6, 0xe7, 0x93, 0x1f, 0xa2, 0x5f, 0xd3, 0x27,
	0x77, 0xcd, 0xd3, 0x74, 0x57, 0x13, 0x7e, 0x30, 0x18, 0xb4, 0x36, 0x9e, 0x42, 0x5f, 0x69, 0x49,
	0xa4, 0x2d, 0xe0, 0x28, 0x6d, 0x95, 0x81, 0xcc, 0x85, 0xde, 0x3a, 0x48, 0x13, 0x1b, 0x1c, 0xa5,
	0x33, 0x4d, 0x0e, 0xd2, 0x0a, 0x1c, 0x43, 0xf7, 0x5d, 0xd4, 0x2d, 0xa2, 0x09, 0xf1, 0x12, 0x8e,
	0x85, 0x5a, 0x2c, 0x45, 0x5d, 0x8b, 0xf2, 0xa9, 0x1d, 0xc4, 0xfd, 0x88, 0x25, 0xc3, 0x74, 0x3f,
	0x11, 0xdf, 0xc0, 0x78, 0xc7, 0xac, 0xea, 0xaa, 0x54, 0xb4, 0x77, 0x32, 0x0e, 0x03, 0xb5, 0xc9,
	0x73, 0xd3, 0xc7, 0xb3, 0x7d, 0x9c, 0x8c, 0x2f, 0x20, 0x70, 0xd5, 0xf7, 0x62, 0xa5, 0x49, 0x9a,
	0xb7, 0xcf, 0xb4, 0x7d, 0xab, 0x64, 0xd1, 0xae, 0xe4, 0xe4, 0xf4, 0x93, 0xed, 0x3e, 0xce, 0x82,
	0xe4, 0xab, 0xc8, 0x09, 0xe7, 0xf0, 0x7f, 0x4e, 0xda, 0xb9, 0x0a, 0xf9, 0xfe, 0x25, 0x9b, 0xbe,
	0xe1, 0xd9, 0xc1, 0x1b, 0xc7, 0x9d, 0x2b, 0x86, 0x0f, 0x10, 0xcc, 0x24, 0x65, 0x9a, 0x5c, 0x12,
	0x0f, 0x17, 0x84, 0xe1, 0x5f, 0xa9, 0x66, 0xf7, 0xb8, 0xf3, 0xd8, 0xb7, 0x7f, 0xd5, 0xf5, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x56, 0x5e, 0x9b, 0x67, 0x02, 0x00, 0x00,
}
