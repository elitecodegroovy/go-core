// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: grpc.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	GRPCReq
	GRPCResp
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for GRPC service

type GRPCService interface {
	CallGRPC(ctx context.Context, in *GRPCReq, opts ...client.CallOption) (*GRPCResp, error)
}

type gRPCService struct {
	c    client.Client
	name string
}

func NewGRPCService(name string, c client.Client) GRPCService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &gRPCService{
		c:    c,
		name: name,
	}
}

func (c *gRPCService) CallGRPC(ctx context.Context, in *GRPCReq, opts ...client.CallOption) (*GRPCResp, error) {
	req := c.c.NewRequest(c.name, "GRPC.CallGRPC", in)
	out := new(GRPCResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GRPC service

type GRPCHandler interface {
	CallGRPC(context.Context, *GRPCReq, *GRPCResp) error
}

func RegisterGRPCHandler(s server.Server, hdlr GRPCHandler, opts ...server.HandlerOption) {
	type gRPC interface {
		CallGRPC(ctx context.Context, in *GRPCReq, out *GRPCResp) error
	}
	type GRPC struct {
		gRPC
	}
	h := &gRPCHandler{hdlr}
	s.Handle(s.NewHandler(&GRPC{h}, opts...))
}

type gRPCHandler struct {
	GRPCHandler
}

func (h *gRPCHandler) CallGRPC(ctx context.Context, in *GRPCReq, out *GRPCResp) error {
	return h.GRPCHandler.CallGRPC(ctx, in, out)
}
